<!-- ### BEGIN COPYRIGHT BLOCK ###
  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; version 2 of the License.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License along
  with this program; if not, write to the Free Software Foundation, Inc.,
  51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

  Copyright (C) 2007 Red Hat, Inc.
  All rights reserved.
     ### END COPYRIGHT BLOCK ### -->
<project name="common" default="main" basedir=".">

    <import file="config/product.xml"/>
    <import file="config/product-ext.xml" optional="true"/>

    <property name="jss.home" value="${jni-jar.home}${dirsec}"/>
    <property name="jss.jar" value="${jss.home}/jss4.jar"/>
    <property name="osutil.jar" value="${jni-jar.home}/osutil.jar"/>
    <property name="symkey.jar" value="${jni-jar.home}/symkey.jar"/>
    <property name="ldapjdk.jar" value="${jar.home}/ldapjdk.jar"/>
    <property name="servlet.jar" value="${jar.home}/servlet.jar"/>
    <property name="velocity.jar" value="${jar.home}/velocity.jar"/>
    <property name="xalan-j2.jar" value="${jar.home}/xalan-j2.jar"/>
    <property name="xerces-j2.jar" value="${jar.home}/xerces-j2.jar"/>
    <property name="cmsutil.jar" value="${pki-jar.home}/cmsutil.jar"/>
    <property name="nsutil.jar" value="${pki-jar.home}/nsutil.jar"/>

    <path id="classpath">
        <pathelement location="${servlet.jar}"/>
        <pathelement location="${jss.jar}"/>
        <pathelement location="${ldapjdk.jar}"/>
        <pathelement location="${nsutil.jar}"/>
        <pathelement location="${cmsutil.jar}"/>
        <pathelement location="${osutil.jar}"/>
        <pathelement location="${symkey.jar}"/>
        <pathelement location="${velocity.jar}"/>
    </path>
    <path id="javadoc_classpath">
        <path refid="classpath"/>
        <pathelement location="${xalan-j2.jar}"/>
        <pathelement location="${xerces-j2.jar}"/>
        <pathelement location="./build/classes"/>
    </path>
    <path id="test_classpath">
        <pathelement location="${jar.home}/junit.jar"/>
        <pathelement location="${build.classes}"/>
        <pathelement location="${build.tests}"/>
        <path refid="classpath"/>
    </path>

    <!-- Set up component-specific properties -->
    <exec executable="perl"
          failonerror="true"
          outputproperty="request.queue.version">
        <arg value="-pi -e"/>
        <arg value='s/REQUEST_VERSION = ".*";/REQUEST_VERSION = "${version}";/'/>
        <arg value="src/com/netscape/cmscore/request/ARequestQueue.java"/>
    </exec>


    <target name="clean"
            depends=""
            description="--> remove component directories">
        <echo message="${begin.clean.log.message}"/>
        <delete dir="${dist.base}"/>
        <delete dir="${build.dir}"/>
        <echo message="${end.clean.log.message}"/>
    </target>


    <target name="download"
            depends=""
            description="--> download dependent components">
        <echo message="${begin.download.log.message}"/>
        <echo message="${empty.download.log.message}"/>
        <echo message="${end.download.log.message}"/>
    </target>


    <target name="compile_java"
            depends=""
            description="--> compile java source code into classes">
        <echo message="${begin.compile.java.log.message}"/>
        <mkdir dir="${build.classes}"/>
        <javac debug="on"
               srcdir="${src.dir}/com/netscape/certsrv"
               destdir="${build.classes}">
            <classpath refid="classpath"/>
        </javac>
        <javac debug="on"
               srcdir="${src.dir}/com/netscape/cms"
               destdir="${build.classes}">
            <classpath refid="classpath"/>
        </javac>
        <javac debug="on"
               srcdir="${src.dir}/com/netscape/cmscore"
               destdir="${build.classes}">
            <classpath refid="classpath"/>
        </javac>
        <echo message="${end.compile.java.log.message}"/>
    </target>


    <target name="build_jars"
            depends="compile_java"
            description="--> generate jar files">
        <echo message="${begin.build.jars.log.message}"/>
        <mkdir dir="${build.jars}"/>
        <jar jarfile="${build.jars}/certsrv.jar">
            <fileset dir="${build.classes}">
                <include name="com/netscape/certsrv/**"/>
            </fileset>
        </jar>
        <jar jarfile="${build.jars}/cms.jar">
            <fileset dir="${build.classes}">
                <include name="com/netscape/cms/**"/>
            </fileset>
        </jar>
        <jar jarfile="${build.jars}/cmscore.jar">
            <fileset dir="${build.classes}">
                <include name="com/netscape/cmscore/**"/>
            </fileset>
        </jar>
        <jar jarfile="${build.jars}/cmsbundle.jar">
            <fileset dir="${src.dir}">
                <include name="LogMessages_en.properties"/>
                <include name="UserMessages_en.properties"/>
            </fileset>
        </jar>
        <echo message="${end.build.jars.log.message}"/>
    </target>


    <target name="build_jni_headers"
            depends="compile_java"
            description="--> generate jni header files">
        <echo message="${begin.build.jni.headers.log.message}"/>
        <echo message="${empty.build.jni.headers.log.message}"/>
        <echo message="${end.build.jni.headers.log.message}"/>
    </target>


    <target name="build"
            depends="build_jars,build_jni_headers"
            description="--> build classes, jars, and jni headers">
        <echo message="${notify.build.log.message}"/>
    </target>


    <target name="compile_junit_tests"
            depends="build"
            description="--> compile junit test source code">
        <echo message="${begin.compile.junit.tests.log.message}"/>
        <mkdir dir="${build.tests}"/>
        <javac debug="on"
               srcdir="${test.dir}"
               destdir="${build.tests}">
            <classpath refid="test_classpath"/>
        </javac>
        <echo message="${end.compile.junit.tests.log.message}"/>
    </target>


    <target name="run_junit_tests"
            depends="compile_junit_tests"
            description="--> execute junit tests">
        <echo message="${begin.run.junit.tests.log.message}"/>
        <junit showoutput="yes"
               printsummary="yes"
               haltonfailure="no">
            <classpath refid="test_classpath"/>
            <formatter type="plain"
                       usefile="no"/>
            <batchtest fork="yes">
                <fileset dir="${build.tests}">
                    <include name="**/*Test.class"/>
                </fileset>
            </batchtest>
        </junit>
        <echo message="${end.run.junit.tests.log.message}"/>
    </target>


    <target name="verify"
            depends="run_junit_tests"
            description="--> build and execute junit tests">
        <echo message="${notify.verify.log.message}"/>
    </target>


    <target name="clean_javadocs"
            depends=""
            description="--> remove javadocs directory">
        <echo message="${begin.clean.javadocs.log.message}"/>
        <delete dir="${docs.dir}"/>
        <echo message="${end.clean.javadocs.log.message}"/>
    </target>


    <target name="compose_javadocs"
            depends="build"
            description="--> generate javadocs">
        <echo message="${begin.compose.javadocs.log.message}"/>
        <mkdir dir="${docs.dir}"/>
        <javadoc destdir="${docs.dir}"
                 maxmemory="512m"
                 author="true"
                 breakiterator="true"
                 version="true"
                 use="true"
                 windowtitle="${ant.project.name}"
                 classpathref="javadoc_classpath"
                 verbose="false">
            <doctitle>
                <![CDATA[<h1>${ant.project.name}</h1>]]>
            </doctitle>
            <fileset dir="src"
                     defaultexcludes="yes">
                <include name="com/netscape/certsrv/**"/>
                <include name="com/netscape/cms/**"/>
            </fileset>
        </javadoc>
        <echo message="${end.compose.javadocs.log.message}"/>
    </target>


    <target name="document"
            depends="clean_javadocs,compose_javadocs"
            description="--> remove old javadocs and compose new javadocs">
        <echo message="${notify.document.log.message}"/>
    </target>


    <target name="distribute_binaries"
            depends="document"
            description="--> create the zip and gzipped tar binary distributions">
        <echo message="${begin.distribute.binaries.log.message}"/>
        <mkdir dir="${dist.base.binaries}"/>

        <echo message="${begin.binary.wrappers.log.message}"/>
        <echo message="${empty.binary.wrappers.log.message}"/>
        <echo message="${end.binary.wrappers.log.message}"/>

        <echo message="${begin.binary.zip.log.message}"/>
        <zip destfile="${dist.base.binaries}/${dist.name}.zip">
            <zipfileset dir="./build/jars"
                        filemode="755"
                        prefix="usr/share/java/${product.prefix}">
                <include name="**"/>
            </zipfileset>
            <zipfileset dir="./scripts"
                        filemode="755"
                        prefix="usr/share/${product.prefix}/scripts">
                <include name="**"/>
            </zipfileset>
            <zipfileset dir="./setup"
                        filemode="755"
                        prefix="usr/share/${product.prefix}/setup">
                <include name="postinstall"/>
            </zipfileset>
            <zipfileset dir="./setup"
                        filemode="644"
                        prefix="usr/share/${product.prefix}/setup">
                <include name="**"/>
                <exclude name="postinstall"/>
            </zipfileset>
            <zipfileset dir="."
                        filemode="644"
                        prefix="usr/share/doc/${dist.name}">
                <include name="EULA"/>
                <include name="LICENSE"/>
            </zipfileset>
            <zipfileset dir="./docs"
                        filemode="644"
                        prefix="usr/share/javadoc/${product.name}-${version}">
                <include name="**"/>
            </zipfileset>
        </zip>
        <echo message="${end.binary.zip.log.message}"/>

        <echo message="${begin.binary.tar.log.message}"/>
        <tar longfile="gnu"
             destfile="${dist.base.binaries}/${dist.name}.tar">
            <tarfileset dir="./build/jars"
                        mode="755"
                        prefix="${dist.name}/usr/share/java/${product.prefix}">
                <include name="**"/>
            </tarfileset>
            <tarfileset dir="./scripts"
                        mode="755"
                        prefix="${dist.name}/usr/share/${product.prefix}/scripts">
                <include name="**"/>
            </tarfileset>
            <tarfileset dir="./setup"
                        mode="755"
                        prefix="usr/share/${product.prefix}/setup">
                <include name="postinstall"/>
            </tarfileset>
            <tarfileset dir="./setup"
                        mode="644"
                        prefix="usr/share/${product.prefix}/setup">
                <include name="**"/>
                <exclude name="postinstall"/>
            </tarfileset>
            <tarfileset dir="."
                        mode="644"
                        prefix="${dist.name}/usr/share/doc/${dist.name}">
                <include name="EULA"/>
                <include name="LICENSE"/>
            </tarfileset>
            <tarfileset dir="./docs"
                        mode="644"
                        prefix="${dist.name}/usr/share/javadoc/${product.name}-${version}">
                <include name="**"/>
            </tarfileset>
        </tar>
        <echo message="${end.binary.tar.log.message}"/>

        <echo message="${begin.binary.gtar.log.message}"/>
        <gzip destfile="${dist.base.binaries}/${dist.name}.tar.gz"
              src="${dist.base.binaries}/${dist.name}.tar"/>
        <delete file="${dist.base.binaries}/${dist.name}.tar"/>
        <delete dir="${dist.name}"/>
        <checksum fileext=".md5">
            <fileset dir="${dist.base.binaries}/">
                <include name="**/*"/>
                <exclude name="**/*.asc"/>
                <exclude name="**/*.md5"/>
            </fileset>
        </checksum>
        <checksum fileext=".sha1"
                  algorithm="SHA">
            <fileset dir="${dist.base.binaries}/">
                <include name="**/*"/>
                <exclude name="**/*.asc"/>
                <exclude name="**/*.md5"/>
            </fileset>
        </checksum>
        <echo message="${end.binary.gtar.log.message}"/>

        <echo message="${end.distribute.binaries.log.message}"/>
    </target>


    <target name="distribute_source"
            depends=""
            description="--> create the zip and gzipped tar source distributions">
        <echo message="${begin.distribute.source.log.message}"/>
        <mkdir dir="${dist.base.source}"/>

        <echo message="${begin.source.zip.log.message}"/>
        <zip destfile="${dist.base.source}/${src.dist.name}.zip">
            <zipfileset dir="."
                        filemode="644"
                        prefix="${src.dist.name}">
                <include name="${specfile}"/>
                <include name="EULA"/>
                <include name="LICENSE"/>
                <include name="build.xml"/>
                <include name="config/product*.xml"/>
                <include name="config/release*.xml"/>
                <include name="release"/>
                <include name="scripts/**"/>
                <include name="setup/**"/>
                <include name="src/**"/>
                <include name="test/**"/>
            </zipfileset>
        </zip>
        <echo message="${end.source.zip.log.message}"/>

        <echo message="${begin.source.tar.log.message}"/>
        <tar longfile="gnu"
             destfile="${dist.base.source}/${src.dist.name}.tar">
            <tarfileset dir="."
                        mode="644"
                        prefix="${src.dist.name}">
                <include name="${specfile}"/>
                <include name="EULA"/>
                <include name="LICENSE"/>
                <include name="build.xml"/>
                <include name="config/product*.xml"/>
                <include name="config/release*.xml"/>
                <include name="release"/>
                <include name="scripts/**"/>
                <include name="setup/**"/>
                <include name="src/**"/>
                <include name="test/**"/>
            </tarfileset>
        </tar>
        <echo message="${end.source.tar.log.message}"/>

        <echo message="${begin.source.gtar.log.message}"/>
        <gzip destfile="${dist.base.source}/${src.dist.name}.tar.gz"
              src="${dist.base.source}/${src.dist.name}.tar"/>
        <delete file="${dist.base.source}/${src.dist.name}.tar"/>
        <delete dir="${dist.name}"/>
        <checksum fileext=".md5">
            <fileset dir="${dist.base.source}/">
                <include name="**/*"/>
                <exclude name="**/*.asc"/>
                <exclude name="**/*.md5"/>
            </fileset>
        </checksum>
        <checksum fileext=".sha1"
                  algorithm="SHA">
            <fileset dir="${dist.base.source}/">
                <include name="**/*"/>
                <exclude name="**/*.asc"/>
                <exclude name="**/*.md5"/>
            </fileset>
        </checksum>
        <echo message="${end.source.gtar.log.message}"/>

        <echo message="${end.distribute.source.log.message}"/>
    </target>


    <target name="distribute"
            depends="distribute_binaries,distribute_source"
            description="--> create binary and source component distributions">
        <echo message="${notify.distribute.log.message}"/>
    </target>


    <target name="main"
            depends="clean,distribute"
            description="--> clean, build, verify, document, distribute [default]">
        <echo message="${notify.main.log.message}"/>
    </target>

</project>

